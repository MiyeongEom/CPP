//-----------------------------------------------------------------------------
// 시험3.cpp 
//
// 2021. 12. 9 목요일
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <random>
#include "shape.h"
#include "Triangle.h"
#include "Circle.h"
using namespace std;

default_random_engine dre;


//--------
int main()
//--------
{
	// 제대로 실행되는 지 확인한다.
	//Triangle aTriangle;
	//Circle aCircle;

	//aTriangle.draw();
	//aCircle.draw();

	cout << "시험출력예시.txt를 참고하라" << endl;
	cout << endl;


	//--------------------------------------------------------
	// 지금부터 순서대로 문제를 해결하고 답을 답안지에 적는다.
	//--------------------------------------------------------

	// [문제 1] Triangel 객체 한 개의 크기가 몇 byte인지 화면에 출력하고 답지에도 적어라. 
	// 객체의 크기가 왜 그렇게 출력되는지 이유를 설명하라.								(20) (코드 5, 이유 15)
	
		// 여기에 들어갈 코드를 답지에 적고 출력결과도 적는다.  (5점)
		// 출력된 이유를 답지에 적는다.							(15점)

	// 정답
	// cout << sizeof(aTriangle) << endl;

	/*
	Shape 클래스의 static 변수는 프로그램 시작 시 데이터 영역에 생성됨에 따라 객체의 크기엔 영향이 없다.
	id 변수의 4바이트와 virtual 함수의 vptr이 8바이트가 존재함에 따라
	중간의 패딩 4바이트를 포함하여 총 16바이트가 나온다
	*/


	int num{ };						// "기말.txt"에 저장된 int의 갯수를 여기에 저장한다

	ifstream in{ "기말.txt" };		// int가 여러 개 저장되어 있다


	// [문제 2] 파일 "기말.txt"에는 몇 개인지 모르는 int 값이 저장되어 있다.
	// 파일을 읽어 모두 몇 개의 int가 기록되어 있는 지 화면에 출력하고 답지에도 써라.	(20) (코드 15, 갯수 5)
	// 읽은 int의 갯수를 위에서 선언한 num에 저장한다.

		// 여기에 들어갈 코드를 답지에 적는다.					(15점)
		// 출력결과도 답지에 적는다.							(5점)


	if (!in) {
		std::cerr << "파일을 열 수 없습니다." << std::endl;
		return 1;
	}

	int value{};    // 저장변수

	// 파일에서 int 값을 읽어오면서 갯수를 카운트
	while (in >> value) {
		 num++;
		//std::cout << "읽은 값 #" << num << ": " << value << endl;
	}

	cout << "파일에 기록된 int 값의 개수: " << num << endl <<endl;

	//--------------------------------------------------------------------------------------------
	// 다형성이 구현됨을 확인해 보는 문제이다.
	//--------------------------------------------------------------------------------------------
	// [문제 2]에서 확인한 int 갯수인 num 개의 도형을 관리할 수 있는 메모리를 생성한다.
	// 도형은 Circle과 Triangle 2가지 종류만 있다.
	//
	// 주의 - 도형의 갯수를 세지 못한 경우 num = 100 으로 문제를 해결하면 됨
	//--------------------------------------------------------------------------------------------

	cout << "다음 출력문은 num = 100인 경우 예시이다" << endl;
	// num = 100;

	cout << "관리해야 할 도형의 수 - " << num << endl;



	// [문제 3] num개의 도형을 관리할 수 있는 메모리를 확보하라. 						(10)
	// 확보한 메모리로 Circle 또는 Triangle을 관리할 수 있어야 한다.

		// 여기에 들어갈 코드를 답지에 적는다.					(10점)

	Shape** shapes = new Shape*[num];


	// [문제 4] 전역변수 dre와 다음 랜덤분포 uid를 사용하여 값이 홀수이면 Triangle을, 
	// 짝수라면 Circle을 i번째 도형으로 생성하여 num개의 도형을 [문제 3]에서 확보한 메모리에 저장하라.	(10)

	uniform_int_distribution<> uid{ 0, 1 };


	for (int i = 0; i < num; ++i) {
		int sel = uid(dre);

		// 랜덤 값 sel 에 따라 i번째 도형을 생성한다.
		// 여기에 들어갈 코드를 [문제 4]의 답으로 적으면 된다.	(10점)

		if (sel % 2 == 0) {
			shapes[i] = new Circle();
		}
		else {
			shapes[i] = new Triangle();
		}


	}

	// [문제 5] 관리하는 모든 도형의 draw() 멤버를 호출하여 다형성이 구현됨을 보여라.	(10)

	cout << endl << "[문제 5] 출력결과" << endl;

	// 여기에 들어갈 코드를 답지에 적는다.					(10점)
		// 모든 도형을 그린다.

	/*
	for (int i = 0; i < num; ++i) {
		shapes[i]->draw();
	}

	// 할당된 메모리를 정리한다.
	for (int i = 0; i < num; ++i) {
		delete shapes[i];
	}
	*/


// [문제 6] num 만큼 도형을 생성한 상태에서 도형 한 개를 추가하려고 한다.
// num 보다 50% 더 많은 갯수의 도형을 관리할 수 있는 코드를 작성하고 
// Circle을 한 개 추가하라.															(40)
//	(예) num이 100 이라면 150개를 담을 수 있는 코드를 작성한다. 
//	  기존 100개 도형의 정보는 유지되어야 한다.
//    101번째 도형으로 Circle을 추가하면 된다.
//    [문제 3]에서 정한 메모리 이름으로 도형을 관리할 수 있어야 한다.
//	  메모리를 확장한 이후 필요없는 메모리를 정리해야 한다.
//	  ShapeManager를 만들어 해결하려하지 말것	

	cout << endl << "[문제 6] 출력결과 - (num+1 개의 도형만 출력한 것임)" << endl;


	// 여기에 들어갈 코드를 답지에 적는다.					(40점)
	
	int newSize = num * 1.5;
	Shape** newShapes = new Shape*[newSize];

	for (int i = 0; i < num; ++i) {
		newShapes[i] = shapes[i];
	}

	// 현재 도형 수 업데이트
	newShapes[num] = new Circle();

	// 도형 출력
	for (int i = 0; i < num; ++i) {
		newShapes[i]->draw();
	}

	newShapes[num]->draw();
// [문제 7] 프로그램을 끝내기 전에 돌려주지 않은 메모리가 있다면 반환하자.			(10)
// (반환할 것이 없다면 없다고 적어라)

	// 여기에 들어갈 코드를 답지에 적는다.					(10점)
	delete[] shapes;
	delete[] newShapes;
}
